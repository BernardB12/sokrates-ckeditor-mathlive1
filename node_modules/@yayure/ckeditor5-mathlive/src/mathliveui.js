import '../theme/mathlive.css';
import mathliveIcon from '../theme/icons/mathlive.svg';
import MathliveEditing from './mathliveediting';
import { ClickObserver } from 'ckeditor5/src/engine';
import { ButtonView } from 'ckeditor5/src/ui';
import { Plugin } from 'ckeditor5/src/core';
import { CKEditorError, global } from 'ckeditor5/src/utils';
import { MathlivePanelCommand } from './mathlivecommand';
const mathKeystroke = 'Ctrl+M';
const pluginScopeName = '_ckeditor5Mathlive';
export default class MathliveUI extends Plugin {
    constructor() {
        super(...arguments);
        this.mathPanelRoot = null;
        this.mathPanelRootDestroy = undefined;
    }
    static get requires() {
        return [MathliveEditing];
    }
    static get pluginName() {
        return 'MathliveUI';
    }
    init() {
        const editor = this.editor;
        editor.editing.view.addObserver(ClickObserver);
        this._createToolbarMathButton();
        this._createMathPanelRoot();
        this._enableUserPopupsInteractions();
        this._listenEditorEvents();
    }
    _showUI() {
        if (!this.mathPanelRoot) {
            return;
        }
        const panelCommand = this.mathPanelRoot[pluginScopeName].panelCommand;
        panelCommand.execute(this.mathPanelRoot);
    }
    _hideUI() {
        if (!this.mathPanelRoot) {
            return;
        }
        const panelCommand = this.mathPanelRoot[pluginScopeName].panelCommand;
        panelCommand.fire('close');
    }
    _createToolbarMathButton() {
        const editor = this.editor;
        const mathliveCommand = editor.commands.get('mathlive');
        if (!mathliveCommand) {
            /**
             * Mathlive command not found
             * @error plugin-load
             */
            // eslint-disable-next-line ckeditor5-rules/ckeditor-error-message
            throw new CKEditorError('plugin-load', { pluginName: 'mathlive' });
        }
        const t = editor.t;
        // Handle the `Ctrl+M` keystroke and show the panel.
        editor.keystrokes.set(mathKeystroke, (_keyEvtData, cancel) => {
            // Prevent focusing the search bar in FF and opening new tab in Edge. #153, #154.
            cancel();
            this._showUI();
        });
        this.editor.ui.componentFactory.add('mathlive', locale => {
            const button = new ButtonView(locale);
            button.label = t('Insert math');
            button.icon = mathliveIcon;
            button.keystroke = mathKeystroke;
            button.tooltip = true;
            button.isToggleable = true;
            this.listenTo(button, 'execute', () => {
                this._showUI();
            });
            return button;
        });
    }
    _createMathPanelRoot() {
        const editor = this.editor;
        const panelRoot = global.document.createElement('div');
        panelRoot.className = 'ck-mathlive-panelhook';
        panelRoot[pluginScopeName] = {
            panelCommand: new MathlivePanelCommand(editor)
        };
        this.mathPanelRoot = panelRoot;
    }
    _enableUserPopupsInteractions() {
        const editor = this.editor;
        const mathliveConfig = editor.config.get('mathlive');
        const viewDocument = editor.editing.view.document;
        this.listenTo(viewDocument, 'click', () => {
            const mathliveCommand = editor.commands.get('mathlive');
            if (mathliveConfig.openPanelWhenEquationSelected && mathliveCommand?.isEnabled && mathliveCommand.value) {
                this._showUI();
            }
        });
    }
    _listenEditorEvents() {
        const editor = this.editor;
        editor.on('change:isReadOnly', (evt, propertyName, isReadOnly) => {
            if (isReadOnly) {
                this._hideUI();
            }
        });
        editor.on('destroy', () => {
            const panelCommand = this.mathPanelRoot?.[pluginScopeName].panelCommand;
            panelCommand?.destroy();
            this._hideUI();
        });
    }
}
